# -*- coding: utf-8 -*-
"""autoattack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sc00O_aP5eojsG9Vx0ocgUOQYF0u4Uto
"""

from tqdm import tqdm
import numpy as np

# https://blog.paperspace.com/writing-lenet5-from-scratch-in-python/
# Load in relevant libraries, and alias where appropriate
import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms

# Define relevant variables for the ML task
batch_size = 128
num_classes = 10
learning_rate = 0.001
num_epochs = 10

# Device will determine whether to run the training on GPU or CPU.
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

device

import random
def set_seeds(seed):
    np.random.seed(seed)
    random.seed(seed)
    torch.manual_seed(seed)

#Loading the dataset and preprocessing
train_dataset = torchvision.datasets.MNIST(root = './data',
                                           train = True,
                                           transform = transforms.Compose([
                                                  transforms.Resize((32,32)),
                                                  transforms.ToTensor(),
                                                  transforms.Normalize(mean = (0.1307,), std = (0.3081,))]),
                                           download = True)


test_dataset = torchvision.datasets.MNIST(root = './data',
                                          train = False,
                                          transform = transforms.Compose([
                                                  transforms.Resize((32,32)),
                                                  transforms.ToTensor(),
                                                  transforms.Normalize(mean = (0.1325,), std = (0.3105,))]),
                                          download=True)


train_loader = torch.utils.data.DataLoader(dataset = train_dataset,
                                           batch_size = batch_size,
                                           shuffle = True)


test_loader = torch.utils.data.DataLoader(dataset = test_dataset,
                                           batch_size = batch_size,
                                           shuffle = True)

class LeNet5(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        # num_classes = 10
        self.layer1 = nn.Sequential(
            nn.Conv2d(1, 6, kernel_size=5, stride=1, padding=0),
            nn.BatchNorm2d(6),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2))
        self.layer2 = nn.Sequential(
            nn.Conv2d(6, 16, kernel_size=5, stride=1, padding=0),
            nn.BatchNorm2d(16),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2))
        self.fc = nn.Linear(400, 120)
        self.relu = nn.ReLU()
        self.fc1 = nn.Linear(120, 84)
        self.relu1 = nn.ReLU()
        self.fc_head = nn.Linear(84, num_classes)

    def embedding(self, x):
        out = self.layer1(x)
        out = self.layer2(out)
        out = out.reshape(out.size(0), -1)
        out = self.fc(out)
        out = self.relu(out)
        out = self.fc1(out)
        out = self.relu1(out)
        return out

    def forward(self, x):
        self.e1 = self.embedding(x)
        out = self.fc_head(self.e1)
        return out

model = LeNet5(num_classes).to(device)

#Setting the loss function
cost = nn.CrossEntropyLoss()

#Setting the optimizer with the model parameters and learning rate
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

#this is defined to print how many steps are remaining when training
total_step = len(train_loader)

total_step = len(train_loader)
for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):  
        images = images.to(device)
        labels = labels.to(device)
        
        #Forward pass
        outputs = model(images)
        loss = cost(outputs, labels)
        	
        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        		
        if (i+1) % 400 == 0:
            print ('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}' 
        		           .format(epoch+1, num_epochs, i+1, total_step, loss.item()))

# Test the model
# In test phase, we don't need to compute gradients (for memory efficiency)
  
with torch.no_grad():
    correct = 0
    total = 0
    for images, labels in tqdm(test_loader):
        images = images.to(device)
        labels = labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    print('Accuracy of the network on the 10000 test images: {} %'.format(100 * correct / total))

#!pip install cleverhans

from cleverhans.torch.attacks.projected_gradient_descent import projected_gradient_descent as pgd

# Test the model
# In test phase, we don't need to compute gradients (for memory efficiency)
set_seeds(42)
pgd_params = {'eps': 0.3, 'eps_iter': 0.1, 'nb_iter': 20, 'norm': np.inf, 'targeted': False, 'rand_init': True}

correct = 0
total = 0
distances = []
test_loader = torch.utils.data.DataLoader(dataset = test_dataset,
                                           batch_size = 128,
                                           shuffle = False)  
for images, labels in tqdm(test_loader):
    images = images.to(device)
    labels = labels.to(device)
    x_adv = pgd(model, images, **pgd_params)
    outputs = model(x_adv)
    _, predicted = torch.max(outputs.data, 1)
    total += labels.size(0)
    correct += (predicted == labels).sum().item()

print('AAccuracy of the network on the 10000 test images: {} %'.format(100 * correct / total))

# import matplotlib.pyplot as plt
def show(im, predicted, label, txt):
# im1 = images[0][0].cpu().numpy()
  plt.figure()
  im = im[0][0].detach().cpu().numpy()
  plt.imshow(im)
  # print(predicted.cpu().numpy(), label.cpu().numpy(), (label==predicted).cpu().numpy())
  title = txt+' {} {} {}'.format(predicted.cpu().numpy(), label.cpu().numpy(), (label==predicted).cpu().numpy())
  plt.title(title)

# Test the model
# In test phase, we don't need to compute gradients (for memory efficiency)
set_seeds(42)
pgd_params = {'eps': 0.3, 'eps_iter': 0.1, 'nb_iter': 20, 'norm': np.inf, 'targeted': False, 'rand_init': True}

correct = 0
xcorrect = 0
total = 0
distances = []
xtest_dataset = torch.utils.data.Subset(test_dataset, np.arange(300))
test_loader = torch.utils.data.DataLoader(dataset = xtest_dataset,
                                           batch_size = 1,
                                           shuffle = False)
for images, labels in tqdm(test_loader):
    images = images.to(device)
    labels = labels.to(device)
    x_adv = pgd(model, images, **pgd_params)
    outputs = model(images)
    xoutputs = model(x_adv)
    _, predicted = torch.max(outputs.data, 1)
    _, xpredicted = torch.max(xoutputs.data, 1)
    total += labels.size(0)
    correct += (predicted == labels).sum().item()
    xcorrect += (xpredicted == labels).sum().item()
    # print()
    # show(images, predicted, labels, 'clean')
    # show(x_adv, xpredicted, labels, 'adv')
    # print('---')
print('Accuracy of the network on the 10000 test images: {} %'.format(100 * correct / total))
print('AAccuracy of the network on the 10000 test images: {} %'.format(100 * xcorrect / total))

